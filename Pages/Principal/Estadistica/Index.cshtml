@page
@model mecanico_plus.Pages.Principal.Estadistica.IndexModel
@{
    ViewData["Title"] = "Estadísticas";
}
<!-- Agrega CDN de Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div class="bg-white p-6 rounded-lg shadow-lg">
    <h1 class="text-2xl font-bold mb-6">Dashboard de estadísticas</h1>

    <!-- Mecánico con más horas -->
    <div class="bg-orange-500 p-4 rounded-lg mb-6">
        <h3 class="text-lg text-white font-bold">Mecánico con más horas</h3>
        @if (Model.MecanicoConMasHoras != null)
        {
            <p class="text-lg-500 font-bold text-white">@Model.MecanicoConMasHoras.Nombre @Model.MecanicoConMasHoras.Apellido</p>
            <p class="text-lg-200 text-white">Total horas: @Model.MecanicoConMasHoras.TotalHoras</p>
        }
        else
        {
            <p class="text-xl text-white">No hay datos disponibles.</p>
        }
    </div>

  
<!-- Sección de KPIs -->
<div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
    <div class="bg-green-500 p-4 rounded-lg text-white">
        <p class="text-sm">Clientes Atendidos</p>
        <p class="text-2xl font-bold">@Model.TotalClientes</p>
    </div>
    <div class="bg-purple-500 p-4 rounded-lg text-white">
        <p class="text-sm">Servicios Pendientes</p>
        <p class="text-2xl font-bold">@Model.ServiciosPendientes</p>
    </div>
    <div class="bg-red-500 p-4 rounded-lg text-white">
        <p class="text-sm">Tiempo Promedio Global</p>
        <p class="text-2xl font-bold">@Model.TiempoPromedioGlobal.ToString("N1")h</p>
    </div>
</div>
 
 
    <!-- Gráficos (chart-container) -->
<div class="chart-container">
    <!-- Horas Trabajadas por Mecánico -->
    <div class="bg-white p-6 rounded-lg shadow-lg mb-6">
         <h2 class="text-xl font-bold mb-4">Horas Trabajadas por Mecánico</h2>
        <div class="relative h-80"> <!-- Altura fija -->
        <canvas id="horasChart"></canvas>
    </div>
    </div>

        <!-- Gráfico de Productividad -->
    <div class="bg-white p-6 rounded-lg shadow-lg mb-6">
        <h2 class="text-xl font-bold mb-4">Reporte de Productividad</h2>
        <canvas id="productividadChart" class="max-h-[400px]"></canvas>
    </div>
</div>

<div class="table-container" style="display: none;">
    <!-- Lista de mecánicos ordenados por horas -->
    <div class="bg-white p-4 rounded-lg shadow mb-6">
         <h2 class="text-xl font-bold mb-4">Horas Trabajadas por Mecánico</h2>
        <table class="min-w-full divide-y divide-gray-200">
            
                       <thead class="bg-orange-500">
                <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">Nombre</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">Apellido</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">Total Horas</th>
                </tr>
            </thead>
            <tbody class="bg-orange-100 divide-y divide-gray-200">
                @foreach (var mecanico in Model.MecanicosOrdenadosPorHoras)
                {
                    <tr class="hover:bg-orange-200">
                        <td class="px-6 py-4 text-blue-900 ">@mecanico.Nombre</td>
                        <td class="px-6 py-4 text-blue-900">@mecanico.Apellido</td>
                        <td class="px-6 py-4 text-blue-900">@mecanico.TotalHoras</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Reporte de Productividad en tabla -->
    <div class="bg-white p-6 rounded-lg shadow-lg mb-6">
         <h2 class="text-xl font-bold mb-4">Reporte de Productividad</h2>
        <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-blue-500">
                <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">Nombre</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">Apellido</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">Servicios Completados</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">Tiempo Promedio de Reparación (Horas)</th>
                </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
                @foreach (var item in Model.ReporteProductividad)
                {
                    <tr class="hover:bg-blue-50">
                        <td class="px-6 py-4">@item.Nombre</td>
                        <td class="px-6 py-4">@item.Apellido</td>
                        <td class="px-6 py-4">@item.ServiciosCompletados</td>
                        <td class="px-6 py-4">@item.TiempoPromedioReparacion</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

  
    <!-- Reporte de Facturación -->
    <div class="bg-white p-6 rounded-lg shadow-lg mb-6">
        <h2 class="text-xl font-bold mb-4">Reporte de Facturación</h2>
        <p class="text-lg">Total Facturado: @Model.ReporteFacturacion.TotalFacturado.ToString("C")</p>
    </div>
    <!-- Gráfico/Table Toggle -->
<div class="mb-6 flex gap-2">
    <button onclick="toggleView('chart')" class="bg-blue-500 text-white px-4 py-2 rounded-lg">Ver Gráficos</button>
    <button onclick="toggleView('table')" class="bg-gray-500 text-white px-4 py-2 rounded-lg">Ver Tablas</button>
</div>
@section Scripts {
    <script>
        // Datos serializados desde el modelo
        const mecanicosData = @Html.Raw(Json.Serialize(Model.MecanicosOrdenadosPorHoras));
        const productividadData = @Html.Raw(Json.Serialize(Model.ReporteProductividad));
// En la sección Scripts
function toggleView(type) {
    const chartContainer = document.querySelector('.chart-container');
    const tableContainer = document.querySelector('.table-container');
    
    if (type === 'chart') {
        chartContainer.style.display = 'block';
        tableContainer.style.display = 'none';
    } else {
        chartContainer.style.display = 'none';
        tableContainer.style.display = 'block';
    }
}
        // Configuración gráfico de horas
       // Cambia el gráfico de barras a uno de torta
new Chart(document.getElementById('horasChart'), {
    type: 'pie', // o 'doughnut' para dona
    data: {
        labels: mecanicosData.map(m => `${m.nombre} ${m.apellido}`),
        datasets: [{
            data: mecanicosData.map(m => m.totalHoras),
            backgroundColor: [
                '#FF6B35', '#2A9D8F', '#E76F51', 
                '#264653', '#F4A261', '#3A506B'
            ],
            borderWidth: 1
        }]
    },
    options: {
        responsive: true,
         maintainAspectRatio: false, // ¡Importante!
        plugins: {
            legend: {
                position: 'right',
                labels: {
                    boxWidth: 12, // Reduce el tamaño de los ítems de leyenda
                    font: { size: 12 } // Tamaño de fuente
                }
            }
        }
    }
});
// En la sección Scripts
new Chart(document.getElementById('serviciosChart'), {
    type: 'bar',
    data: {
        labels: ['Ene', 'Feb', 'Mar', /*...*/],
        datasets: [{
            label: 'Servicios Completados',
            data: [65, 59, 80, /*...*/],
            backgroundColor: '#2A9D8F'
        }, {
            label: 'Servicios Pendientes',
            data: [28, 48, 40, /*...*/],
            backgroundColor: '#E76F51'
        }]
    }
});

        // Configuración gráfico de productividad
        new Chart(document.getElementById('productividadChart'), {
            type: 'line',
            data: {
                labels: productividadData.map(p => `${p.nombre} ${p.apellido}`),
                datasets: [{
                    label: 'Servicios Completados',
                    data: productividadData.map(p => p.serviciosCompletados),
                    borderColor: '#2A9D8F',
                    fill: false,
                    yAxisID: 'y'
                },
                {
                    label: 'Tiempo Promedio (Horas)',
                    data: productividadData.map(p => p.tiempoPromedioReparacion),
                    borderColor: '#E76F51',
                    fill: false,
                    yAxisID: 'y1'
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        type: 'linear',
                        position: 'left',
                        title: { display: true, text: 'Servicios' }
                    },
                    y1: {
                        type: 'linear',
                        position: 'right',
                        title: { display: true, text: 'Horas' },
                        grid: { drawOnChartArea: false }
                    }
                }
            }
        });
    </script>
}

<style>
    :root {
    --color-primario: #2A9D8F;  /* Verde azulado */
    --color-secundario: #E76F51; /* Coral */
    --color-accento: #264653;    /* Azul oscuro */
}
</style>